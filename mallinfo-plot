#!/usr/bin/gnuplot -c

if (ARGC < 1) {
    print "Usage: ./mallinfo-plot <memory-report-file> [<plot-name>]"
    exit
}

report = ARG1
desired_plot = ARGC >= 2 ? ARG2 : "malloc-used"

set title report

# The second column here is not taken into account anywhere, we just use the `stats` command
# to get the minimum time and number of rows (including skip_records)
stats report using (timecolumn(1,"%s")):(column(2)) name "DUMMY_STATS" nooutput
min_time = DUMMY_STATS_min_x
num_lines = DUMMY_STATS_records

# Skip the first few rows when calculating trends since they are likely outliers (application initialization)
desired_skip_rows = 5 * 24 # 120s
skip_records = num_lines > desired_skip_rows ? desired_skip_rows : 0

stats report using (timecolumn(1,"%s")):(column(2)) every ::skip_records name "RSS" nooutput
rss_trend(t) = RSS_intercept + t * RSS_slope

set xdata time
set format x "%H:%M"
set format y "%.0s %cB"
set xlabel "Time (HH:MM)"
set ylabel "Memory usage"
set yrange [0:]
set grid
bind "q" 'exit gnuplot'
bind "Close" 'exit gnuplot'

shown_time(_) = timecolumn(1, "%s") - min_time

if (desired_plot eq "rss") {
    valid_plot = 1
    print sprintf("RSS average growth rate: %.2f MB/hour (%.2f bytes/s)", RSS_slope * 3600 / 1e6, RSS_slope)
    plot \
        report using (shown_time(1)):2 title "RSS" with lines, \
        rss_trend(x) title "RSS trend" with lines
}
if (desired_plot eq "arena") {
    valid_plot = 1
    plot report using (shown_time(1)):4 title "Arenas size" with line
}
if (desired_plot eq "malloc-used") {
    valid_plot = 1
    plot \
        report using (shown_time(1)):(column(8)) title "Used (only in malloc's arena)" with line, \
        report using (shown_time(1)):(column(7)) title "Used (only in malloc's mmap)" with line, \
        report using (shown_time(1)):(column(8)+column(7)) title "Used (malloc's arena + malloc's mmap)" with line
        #report using (shown_time(1)):(column(8)+column(9)) title "Used + Free" with points
}
if (desired_plot eq "rss-anon-vs-rest") {
    valid_plot = 1
    plot \
        report using (shown_time(1)):3 title "RSS (anonymous)" with lines, \
        report using (shown_time(1)):(column(2)-column(3)) title "RSS (total - anonymous)" with lines
}
if (desired_plot eq "rss-anon-vs-malloc") {
    valid_plot = 1
    plot \
        report using (shown_time(1)):3 title "RSS (anonymous)" with lines, \
        report using (shown_time(1)):(column(4)+column(7)) title "malloc memory size (arenas + mmap)" with lines
}
if (desired_plot eq "anon-rss-other-than-malloc") {
    valid_plot = 1
    plot \
        report using (shown_time(1)):(column(3)-(column(4)+column(7))) title "Anonymous RSS minus space allocated by malloc" with lines
}
if (desired_plot eq "used") {
    valid_plot = 1
    plot \
        report using (shown_time(1)):4 title "Size of malloc arenas" with line, \
        report using (shown_time(1)):(column(4)-column(9)) title "Used space in malloc arenas" with line
}
if (desired_plot eq "free") {
    valid_plot = 1
    set y2label "Ratio of unused arena (red line only)"
    set y2range [0:]
    set ytics nomirror
    set y2tics nomirror
    set format y2
    plot \
        report using (shown_time(1)):4 title "Size of malloc arenas" with line, \
        report using (shown_time(1)):9 title "Free space in malloc arenas" with line, \
        report using (shown_time(1)):(column(9)/column(4)) title "Ratio of unused arena" with line axes x1y2 linecolor "red"
}
if (desired_plot eq "allocations") {
    valid_plot = 1
    set ylabel "Allocations (arena)"
    set y2label "Allocations (mmap)"
    set format y
    set ytics nomirror
    set y2tics nomirror
    set yrange [0:]
    set y2range [0:]
    plot \
        report using (shown_time(1)):3 title "# of live allocations (only in arena)" with lines, \
        report using (shown_time(1)):6 title "# of live allocations (only in malloc's mmap)" with lines axes x1y2
}

if (!exists("valid_plot")) {
    print "Unknown plot: " . desired_plot
    exit
}

# Keep running so that gnuplot does not exit and continues to redraw the plot if the window is resized
while (1) {
    pause 100
}

# vim: set ft=gnuplot autoindent:
